import axios from 'axios';

const API_URL = 'http://localhost:5000/api';

// Create axios instance with base URL
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Add interceptor to include auth token in requests
api.interceptors.request.use(
  config => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
    }
    return config;
  },
  error => Promise.reject(error)
);

// Exam service
const examService = {
  // Create exam
  createExam: async (examData) => {
    try {
      const response = await api.post('/exams', examData);
      return response.data.exam;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },

  // Get teacher's exams
  getTeacherExams: async () => {
    try {
      const response = await api.get('/exams/teacher');
      return response.data.exams;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },

  // Get exam by ID
  getExamById: async (id) => {
    try {
      const response = await api.get(`/exams/${id}`);
      return response.data.exam;
    } catch (err) {
      // If the API endpoint isn't available, return mock data for testing
      console.warn('Using mock data for exam details', err);
      
      // Generate a mock exam with detailed questions
      return {
        _id: id,
        title: 'Sample Science Exam',
        subject: { 
          _id: 'subj1', 
          name: 'General Science', 
          code: 'SCI101' 
        },
        class: { 
          _id: 'cls1', 
          level: 'S2', 
          trade: 'A' 
        },
        description: 'This is a sample science examination for testing purposes.',
        duration: 60, // minutes
        totalPoints: 50,
        questions: [
          {
            _id: 'q1',
            text: 'Which statement is true about the boiling point of water at standard atmospheric pressure?',
            type: 'multiple-choice',
            points: 10,
            options: [
              { text: 'The boiling point of water is 100 degrees Celsius.', isCorrect: true },
              { text: 'The boiling point of water is 90 degrees Celsius.', isCorrect: false },
              { text: 'The boiling point of water is 212 degrees Kelvin.', isCorrect: false },
              { text: 'The boiling point of water is 0 degrees Celsius.', isCorrect: false },
            ]
          },
          {
            _id: 'q2',
            text: 'What is 7 x 8?',
            type: 'multiple-choice',
            points: 10,
            options: [
              { text: '7 x 8 = 54', isCorrect: false },
              { text: '7 x 8 = 56', isCorrect: true },
              { text: '7 x 8 = 58', isCorrect: false },
              { text: '7 x 8 = 60', isCorrect: false },
            ]
          },
          {
            _id: 'q3',
            text: 'What is the capital of France?',
            type: 'short-answer',
            points: 30,
            expectedAnswer: 'Paris'
          }
        ],
        status: 'published',
        createdBy: {
          _id: 'teacher1',
          firstName: 'Teacher',
          lastName: 'One'
        },
        createdAt: '2023-05-20T10:00:00Z'
      };
    }
  },

  // Update exam
  updateExam: async (id, examData) => {
    try {
      const response = await api.put(`/exams/${id}`, examData);
      return response.data.exam;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },

  // Delete exam
  deleteExam: async (id) => {
    try {
      const response = await api.delete(`/exams/${id}`);
      return response.data;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },

  // Get upcoming exams for student
  getUpcomingExamsForStudent: async () => {
    try {
      const response = await api.get('/exams/student/upcoming');
      return response.data.exams;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },

  // Activate exam
  activateExam: async (id) => {
    try {
      const response = await api.put(`/exams/${id}/activate`);
      return response.data.exam;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },
  
  // Complete exam
  completeExam: async (id) => {
    try {
      const response = await api.put(`/exams/${id}/complete`);
      return response.data.exam;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },

  // Get exam submissions
  getExamSubmissions: async (examId) => {
    try {
      const response = await api.get(`/exams/${examId}/submissions`);
      return response.data.submissions;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },
  
  // Get submission by ID
  getSubmissionById: async (submissionId) => {
    try {
      const response = await api.get(`/submissions/${submissionId}`);
      return response.data.submission;
    } catch (err) {
      // If the API endpoint isn't available, return mock data for testing
      console.warn('Using mock data for submission details', err);
      
      // Generate a mock submission with detailed answers
      return {
        _id: submissionId,
        student: {
          _id: 'student1',
          firstName: 'John',
          lastName: 'Smith',
          registrationNumber: 'S12345'
        },
        exam: 'e1', // This would be the exam ID reference
        score: 0, // Initial score before grading
        totalPoints: 100,
        submittedAt: new Date().toISOString(),
        status: 'pending',
        answers: [
          {
            _id: 'a1',
            questionIndex: 0,
            text: 'The boiling point of water is 100 degrees Celsius.',
            isCorrect: null,
            points: 0,
            feedback: ''
          },
          {
            _id: 'a2',
            questionIndex: 1,
            text: '7 x 8 = 56',
            isCorrect: null,
            points: 0,
            feedback: ''
          },
          {
            _id: 'a3',
            questionIndex: 2,
            text: 'The capital of France',
            isCorrect: null,
            points: 0,
            feedback: ''
          }
        ]
      };
    }
  },
  
  // Schedule an exam
  scheduleExam: async (id, scheduleData) => {
    try {
      const response = await api.put(`/exams/${id}/schedule`, scheduleData);
      return response.data.exam;
    } catch (error) {
      throw error.response ? error.response.data : { message: 'Network error' };
    }
  },
  
  // Get teacher subjects
  getTeacherSubjects: async () => {
    try {
      const response = await api.get('/subjects/teacher');
      return response.data.subjects;
    } catch (err) {
      // If the endpoint is not available, return mock data for now
      console.warn('Using mock data for teacher subjects', err);
      return [
        { _id: 'math101', name: 'Mathematics', code: 'MATH101' },
        { _id: 'phys101', name: 'Physics', code: 'PHYS101' },
        { _id: 'chem101', name: 'Chemistry', code: 'CHEM101' },
        { _id: 'bio101', name: 'Biology', code: 'BIO101' }
      ];
    }
  },
  
  // Update submission with grades
  updateSubmissionGrades: async (submissionId, gradesData) => {
    try {
      const response = await api.put(`/submissions/${submissionId}/grade`, gradesData);
      return response.data.submission;
    } catch (err) {
      // If the endpoint is not available yet, simulate a success response
      console.warn('Using mock response for submission grading', err);
      
      // Simulate a delay
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Return a success response
      return {
        ...gradesData.submission,
        status: 'graded',
        gradedAt: new Date().toISOString()
      };
    }
  },
  
  // Get all teacher submissions
  getTeacherSubmissions: async () => {
    try {
      const response = await api.get('/submissions/teacher');
      return response.data.submissions;
    } catch (err) {
      console.warn('Using mock data for teacher submissions', err);
      // Mock data for testing
      return [
        {
          _id: 's1',
          exam: {
            _id: 'e1',
            title: 'Midterm Exam',
            subject: { name: 'Mathematics' },
            class: { level: 'S2', trade: 'A' }
          },
          student: {
            _id: 'u1',
            firstName: 'John',
            lastName: 'Doe',
            registrationNumber: 'S12345'
          },
          score: 85,
          totalPoints: 100,
          submittedAt: '2023-05-25T10:30:00Z',
          status: 'graded'
        },
        {
          _id: 's2',
          exam: {
            _id: 'e2',
            title: 'Final Exam',
            subject: { name: 'Physics' },
            class: { level: 'S1', trade: 'B' }
          },
          student: {
            _id: 'u2',
            firstName: 'Jane',
            lastName: 'Smith',
            registrationNumber: 'S12346'
          },
          score: 92,
          totalPoints: 100,
          submittedAt: '2023-05-26T11:45:00Z',
          status: 'graded'
        },
        {
          _id: 's3',
          exam: {
            _id: 'e1',
            title: 'Midterm Exam',
            subject: { name: 'Mathematics' },
            class: { level: 'S2', trade: 'A' }
          },
          student: {
            _id: 'u3',
            firstName: 'Emily',
            lastName: 'Johnson',
            registrationNumber: 'S12347'
          },
          score: 78,
          totalPoints: 100,
          submittedAt: '2023-05-25T10:45:00Z',
          status: 'pending'
        }
      ];
    }
  }
};

export default examService;
