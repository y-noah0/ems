EMS - Educational Management System Backend
===========================================

Overview
--------
This document provides a comprehensive overview of the Educational Management System (EMS) backend, detailing its architecture, features, and functionality. The system is designed to manage educational processes including user management, class organization, exam administration, and performance reporting.

System Architecture
-------------------
- **Stack:** MERN (MongoDB, Express.js, React.js, Node.js)
- **Database:** MongoDB
- **Pattern:** MVC (Model-View-Controller)

**Key Components:**
- **Models:** Database schemas using Mongoose
- **Controllers:** Business logic and request handling
- **Routes:** API endpoint definitions
- **Middleware:** Authentication, authorization, and validation

Core Features
-------------

1. User Management System
    - **User Types:**
      - **Students:** Take exams, view results, track progress
      - **Teachers:** Create/manage exams, grade submissions, view/generate reports
      - **Deans:** Oversee departments, access data, manage teachers/subjects
      - **System Administrators:** Full control, user/system management

2. Class & Subject Organization
    - **Classes:** By level (L3, L4, L5), trade (SOD, NIT, MMP), year, term
    - **Subjects:** Linked to classes, assigned to teachers, credit-based weighting

3. Comprehensive Exam System
    - **Exam Types:** 
      - Assessment1 (25%), Assessment2 (25%), Exam (40%), Homework (5%), Quiz (5%)
    - **Question Types:** 
      - MCQ (auto-graded), Open-ended (teacher graded)
    - **Exam Lifecycle:** 
      - Draft → Scheduled → Active → Completed → Graded

4. Submission & Grading System
    - **Student Exam Process:** Start → Save (auto-save) → Submit → Review
    - **Grading Workflow:** Auto-grading (MCQ), Teacher grading (open-ended), Final score, Grade letter
    - **Violation Monitoring:** Suspicious behavior tracking, thresholds, auto-submission

5. Advanced Reporting System
    - **Individual Reports:** By assessment type, subject, historical tracking
    - **Combined Reports:** Weighted averages, subject metrics, overall grades
    - **Administrative Reports:** Class/subject/institutional performance

API Endpoints
-------------

**Authentication**
- `POST /api/auth/login` - User authentication
- `POST /api/auth/logout` - End user session
- `POST /api/auth/change-password` - Password management

**User Management**
- `GET /api/users` - List users (admin only)
- `POST /api/users` - Create user (admin only)
- `PUT /api/users/:id` - Update user information
- `DELETE /api/users/:id` - Remove user (admin only)

**Class & Subject Management**
- `GET /api/classes` - List available classes
- `POST /api/classes` - Create new class
- `GET /api/subjects` - List subjects
- `POST /api/subjects` - Add new subject

**Exam Management**
- `GET /api/exams` - List exams (filtered by role)
- `POST /api/exams` - Create new exam
- `PUT /api/exams/:id` - Update exam details
- `GET /api/exams/active` - Get currently active exams

**Submission Handling**
- `POST /api/submissions/start` - Begin exam attempt
- `POST /api/submissions/save` - Save progress
- `POST /api/submissions/submit` - Complete exam
- `POST /api/submissions/auto-submit` - Force submission
- `POST /api/submissions/log-violation` - Record violation

**Grading & Assessment**
- `POST /api/submissions/grade` - Grade open questions
- `GET /api/submissions/teacher` - View submissions for grading

**Reporting**
- `GET /api/submissions/results/assessment1` - Assessment 1 results
- `GET /api/submissions/results/assessment2` - Assessment 2 results
- `GET /api/submissions/results/exam` - Exam results
- `GET /api/submissions/results/homework` - Homework results
- `GET /api/submissions/results/quiz` - Quiz results
- `GET /api/submissions/results/combined` - All assessment types combined
- `GET /api/submissions/student/marks` - Student performance by ID
- `GET /api/submissions/my-marks` - Current student's performance

Key Controllers
---------------

- **Authentication Controller:** Manages user login, validation, and session management.
- **User Controller:** Handles user creation, updates, and information retrieval with role-based restrictions.
- **Class & Subject Controllers:** Manage the academic structure of the institution.
- **Exam Controller:** Controls the lifecycle of exams from creation to completion.
- **Submission Controller:** Handles exam session management, answer processing, violation tracking, auto-submission, grading workflow, and reporting.

Data Models
-----------

- **User:** Personal info, authentication, role attributes, class/subject relationships
- **Class:** Level, trade, year, term, students, subjects
- **Subject:** Name, description, credit, classes, teachers
- **Exam:** Configuration, scheduling, questions, scoring, status
- **Submission:** Answers, timing, grading, violations

Technical Implementation Details
-------------------------------

- **Security Features:** JWT authentication, role-based access, bcrypt password hashing, route protection
- **Performance Optimization:** Efficient queries, MongoDB indexing, controlled population
- **Error Handling:** Consistent format, express-validator, try-catch for async
- **Grading System:** Standardized scale (A+ to F), weighted assessment calculation, proportional adjustment if missing types

Grading Scale
-------------
- A+: 90-100%
- A: 80-89%
- B+: 75-79%
- B: 70-74%
- C+: 65-69%
- C: 60-64%
- D+: 55-59%
- D: 50-54%
- F: Below 50%

Weighted Assessment Calculation
------------------------------
- Assessment1: 25%
- Assessment2: 25%
- Exam: 40%
- Homework: 5%
- Quiz: 5%
- *Weights adjust if any assessment type is missing.*

Conclusion
----------
The EMS backend provides a robust, modular foundation for managing educational processes, supporting flexible assessments and standardized reporting for clear insights at all institutional levels.
